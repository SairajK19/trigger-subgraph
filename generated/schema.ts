// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class TriggerNft extends Entity {
  constructor(id: string) {
    // tokenId: BigInt!
    // portalId: BigInt!
    // tokenUri: String!
    // currentOwner: Bytes! # address
    // previousOwner: Bytes!
    // mintedBy: Bytes!
    // forSale: Boolean!
    // price: BigInt!

    super();
    this.set("id", Value.fromString(id));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("portalId", Value.fromBigInt(BigInt.zero()));
    this.set("tokenUri", Value.fromString(""));
    this.set("currentOwner", Value.fromBytes(Bytes.empty()));
    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("mintedBy", Value.fromBytes(Bytes.empty()));
    this.set("forSale", Value.fromBoolean(false));
    this.set("price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save nft without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TriggerNft must have an ID of type String but the id '${id.displayData()} is of type ${id.displayKind()}'`
      );

      store.set("TriggerNft", id.toString(), this);
    }
  }

  static load(id: string): TriggerNft | null {
    return changetype<TriggerNft | null>(store.get("TriggerNft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get portalId(): BigInt {
    let value = this.get("portalId");
    return value!.toBigInt();
  }

  set portalId(value: BigInt) {
    this.set("portalId", Value.fromBigInt(value));
  }

  get tokenUri(): string {
    let value = this.get("tokenUri");
    return value!.toString();
  }

  set tokenUri(value: string) {
    this.set("tokenUri", Value.fromString(value));
  }

  get currentOwner(): Bytes {
    let value = this.get("currentOwner");
    return value!.toBytes();
  }

  set currentOwner(value: Bytes) {
    this.set("currentOwner", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get mintedBy(): Bytes {
    let value = this.get("mintedBy");
    return value!.toBytes();
  }

  set mintedBy(value: Bytes) {
    this.set("mintedBy", Value.fromBytes(value));
  }

  get forSale(): boolean {
    let value = this.get("forSale");
    return value!.toBoolean();
  }

  set forSale(value: boolean) {
    this.set("forSale", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class TriggerPortal extends Entity {
  constructor(id: string) {
    // id: ID!;
    // dbThreadID: String!;
    // appId: BigInt!;
    // createdAt: BigInt;
    // createBy: Bytes!;
    // totalNfts: BigInt!;
    // totalMembers: BigInt!;
    // totalVolume: BigInt!;

    super();
    this.set("id", Value.fromString(id));
    this.set("dbThreadID", Value.fromString(""));
    this.set("appId", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("createBy", Value.fromBytes(Bytes.empty()));
    this.set("totalNfts", Value.fromBigInt(BigInt.zero()));
    this.set("totalMembers", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TriggerPortal without an ID");

    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TriggerPortal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );

      store.set("TriggerPortal", id.toString(), this);
    }
  }

  static load(id: string): TriggerPortal | null {
    return changetype<TriggerPortal | null>(store.get("TriggerPortal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dbThreadID(): string {
    let value = this.get("dbThreadID");
    return value!.toString();
  }

  set dbThreadID(value: string) {
    this.set("dbThreadID", Value.fromString(value));
  }

  get appId(): BigInt {
    let value = this.get("appId");
    return value!.toBigInt();
  }

  set appId(value: BigInt) {
    this.set("appId", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createBy(): Bytes {
    let value = this.get("createBy");
    return value!.toBytes();
  }

  set createBy(value: Bytes) {
    this.set("createBy", Value.fromBytes(value));
  }

  get totalNfts(): BigInt {
    let value = this.get("totalNfts");
    return value!.toBigInt();
  }

  set totalNfts(value: BigInt) {
    this.set("totalNfts", Value.fromBigInt(value));
  }

  get totalMembers(): BigInt {
    let value = this.get("totalMembers");
    return value!.toBigInt();
  }

  set totalMembers(value: BigInt) {
    this.set("totalMembers", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    //   userAddr: Bytes!
    //   portal: BigInt!

    super();
    this.set("id", Value.fromString(id));
    this.set("userAddr", Value.fromBytes(Bytes.empty()));
    this.set("portal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User without an ID");

    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );

      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddr(): Bytes {
    let value = this.get("userAddr");
    return value!.toBytes();
  }

  set userAddr(value: Bytes) {
    this.set("userAddr", Value.fromBytes(value));
  }

  get portal(): BigInt {
    let value = this.get("portal");
    return value!.toBigInt();
  }

  set portal(value: BigInt) {
    this.set("portal", Value.fromBigInt(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    // id: ID!
    // portalId: BigInt!
    // amount: BigInt!
    // timestamp: BigInt!
    // staker: Bytes!

    super();
    this.set("id", Value.fromString(id));
    this.set("portalId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("staker", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake without an ID");

    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Stake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );

      store.set("Stake", id.toString(), this);
    }
  }

  static load(id: string): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portalId(): BigInt {
    let value = this.get("portalId");
    return value!.toBigInt();
  }

  set portalId(value: BigInt) {
    this.set("portalId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }
}

export class ClaimedXp extends Entity {
  constructor(id: string) {
    // id: ID!;
    // portalId: BigInt!;
    // claimer: Bytes!;
    // amount: BigInt!;

    super();
    this.set("id", Value.fromString(id));
    this.set("portalId", Value.fromBigInt(BigInt.zero()));
    this.set("claimer", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimedXp without an ID");

    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimedXp must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );

      store.set("ClaimedXp", id.toString(), this);
    }
  }

  static load(id: string): ClaimedXp | null {
    return changetype<ClaimedXp | null>(store.get("ClaimedXp", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portalId(): BigInt {
    let value = this.get("portalId");
    return value!.toBigInt();
  }

  set portalId(value: BigInt) {
    this.set("portalId", Value.fromBigInt(value));
  }

  get claimer(): Bytes {
    let value = this.get("claimer");
    return value!.toBytes();
  }

  set claimer(value: Bytes) {
    this.set("claimer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
